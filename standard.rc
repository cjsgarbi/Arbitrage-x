[MASTER]

# Uma lista separada por vírgulas de nomes de pacotes ou módulos de onde extensões C podem
# ser carregadas. Extensões estão sendo carregadas no interpretador Python ativo e podem
# executar código arbitrário.
extension-pkg-whitelist=

# Adicione arquivos ou diretórios à lista negra. Eles devem ser nomes base, não
# caminhos.
ignore=CVS

# Adicione arquivos ou diretórios que correspondam aos padrões regex à lista negra. O
# regex corresponde a nomes base, não a caminhos.
ignore-patterns=

# Código Python a ser executado, geralmente para manipulação de sys.path como
# pygtk.require().
#init-hook=

# Use vários processos para acelerar o Pylint. Especificar 0 detectará automaticamente o
# número de processadores disponíveis para uso.
jobs=1

# Controle a quantidade de valores inferidos em potencial ao inferir um único
# objeto. Isso pode ajudar no desempenho ao lidar com funções grandes ou
# condições complexas e aninhadas.
limit-inference-results=100

# Lista de plugins (como valores separados por vírgulas de nomes de módulos python) para carregar,
# geralmente para registrar verificadores adicionais.
load-plugins=

# Dados coletados do Pickle para comparações posteriores.
persistent=yes

# Especifica um arquivo de configuração.
#rcfile=

# Quando habilitado, o pylint tentaria adivinhar erros de configuração comuns e emitiria
# dicas amigáveis ​​ao usuário em vez de mensagens de erro falso-positivo.
suggestion-mode=yes

# Permitir o carregamento de extensões C arbitrárias. As extensões são importadas para o
# interpretador Python ativo e podem executar código arbitrário.
unsafe-load-any-extension=no

[CONTROLE DE MENSAGENS]

# Mostrar apenas avisos com os níveis de confiança listados. Deixe em branco para mostrar
# todos. Níveis válidos: ALTO, INFERÊNCIA, FALHA_DE_INFERÊNCIA, INDEFINIDO.
confidence=

# Desabilitar a mensagem, relatório, categoria ou verificador com os IDs fornecidos. Você
# pode fornecer vários identificadores separados por vírgula (,) ou colocar esta
# opção várias vezes (apenas na linha de comando, não no arquivo de
# configuração, onde deve aparecer apenas uma vez). Você também pode usar "--disable=all" para
# desabilitar tudo primeiro e depois reabilitar verificações específicas. Por exemplo, se
# você quiser executar apenas o verificador de similaridades, você pode usar "--disable=all
# --enable=similarities". Se você quiser executar apenas o verificador de classes, mas não tiver
# nenhuma mensagem de nível de Aviso exibida, use "--disable=all --enable=classes
# --disable=W".
disable=too-few-public-methods,
missing-module-docstring,
missing-class-docstring,
raise-missing-from,
consider-using-from-import,
use-maxsplit-arg,
unspecified-encoding,
consider-using-f-string,
missing-function-docstring,
wrong-import-order,
trailing-whitespace,
invalid-name,
too-many-locals,
line-too-long

# Habilite a mensagem, o relatório, a categoria ou o verificador com os IDs fornecidos. Você pode
# fornecer vários identificadores separados por vírgula (,) ou colocar esta opção
# várias vezes (apenas na linha de comando, não no arquivo de configuração onde
# deve aparecer apenas uma vez). Veja também a opção "--disable" para exemplos.
enable=c-extension-no-member


[RELATÓRIOS]

# Expressão Python que deve retornar uma pontuação menor ou igual a 10. Você
# tem acesso às variáveis ​​'error', 'warning', 'refactor' e 'convention'
# que contêm o número de mensagens em cada categoria, bem como 'statement'
# que é o número total de declarações analisadas. Esta pontuação é usada pelo
# relatório de avaliação global (RP0004).
evaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)

# Modelo usado para exibir mensagens. Esta é uma string de formato de novo estilo do Python
# usada para formatar as informações da mensagem. Veja a documentação para todos os detalhes.
#msg-template=

# Defina o formato de saída. Os formatos disponíveis são text, parseable, colorized, json
# e msvs (visual studio). Você também pode dar uma classe reporter, por exemplo
# mypackage.mymodule.MyReporterClass.
output-format=text

# Informa se deve exibir um relatório completo ou apenas as mensagens.
reports=no

# Ativa a pontuação de avaliação.
score=yes

[REFATORAÇÃO]

# Número máximo de blocos aninháveis ​​para o corpo da função/método
máximo de blocos aninhados = 5

# Nome completo das funções que nunca serão retornadas. Ao verificar
# inconsistent-return-statements é uma função que nunca retorna para chamada, então
# ela será considerada como uma declaração de retorno explícita e nenhuma mensagem será
#impressa.
funções que nunca retornam = sys.exit

[SEMILARIDADES]

# Ignore comentários ao calcular semelhanças.
ignorar-comentários = sim

# Ignore docstrings ao calcular semelhanças.
ignore-docstrings = sim

# Ignore as importações ao calcular semelhanças.
ignorar-importações = não

# Número mínimo de linhas de uma similaridade.
min-linhas de similaridade = 4


[REGISTRO]

# Estilo de formato usado para verificar a string de formato de log. `old` significa usar %
# formatação, `new` é para formatação `{}` e `fstr` é para f-strings.
logging-format-style=old

# Módulos de log para verificar se os argumentos de formato de string estão no log # formato de parâmetro de função.
logging-modules=logging


[STRING]

# Este sinalizador controla se o implicit-str-concat-in-sequence deve
# gerar um aviso sobre concatenação implícita de strings em sequências definidas em
# várias linhas.
check-str-concat-over-line-jumps=no

[SPELLING]

# Limita a contagem de sugestões emitidas para erros de ortografia.
max-spelling-suggestions=4

# Nome do dicionário ortográfico. Dicionários disponíveis: nenhum. Para fazê-lo funcionar,
# instale o pacote python-enchant.
spelling-dict=

# Lista de palavras separadas por vírgulas que não devem ser verificadas.
spelling-ignore-words=

# Um caminho para um arquivo que contém o dicionário privado; uma palavra por linha.
spelling-private-dict-file=

# Informa se deve armazenar palavras desconhecidas no dicionário privado (consulte a
# opção --spelling-private-dict-file) em vez de gerar uma mensagem.
spelling-store-unknown-words=no

[FORMAT]

# Formato esperado de final de linha, por exemplo, vazio (qualquer final de linha), LF ou CRLF.
expected-line-ending-format=

# Expressão regular para uma linha que pode ser maior que o limite.
ignore-long-lines=^\s*(# )?<?https?://\S+>?$

# Número de espaços de recuo necessários dentro de uma linha suspensa ou contínua.
indent-after-paren=4

# String usada como unidade de recuo. Geralmente é " " (4 espaços) ou "\t" (1
# tabulação).
indent-string=' '

# Número máximo de caracteres em uma única linha.
max-line-length=120

# Número máximo de linhas em um módulo.
max-module-lines=1000

# Permite que o corpo de uma classe esteja na mesma linha que a declaração se o corpo
# contiver uma única instrução.
single-line-class-stmt=no

# Permitir que o corpo de um if esteja na mesma linha que o teste se não houver
# else.
single-line-if-stmt=no

[MISCELLANEOUS]

# Lista de tags de nota a serem consideradas, separadas por uma vírgula.
notes=FIXME,
XXX,
TODO

[BASIC]

# Estilo de nomenclatura correspondente aos nomes de argumentos corretos.
argument-naming-style=snake_case

# Expressão regular correspondente aos nomes de argumentos corretos. Substitui argument-
# naming-style.
#argument-rgx=

# Estilo de nomenclatura correspondente aos nomes de atributos corretos.
attr-naming-style=snake_case

# Expressão regular correspondente aos nomes de atributos corretos. Substitui attr-naming-
# style.
#attr-rgx=

# Nomes de variáveis ​​incorretos que devem ser sempre recusados, separados por uma vírgula.
bad-names=foo,
bar,
baz,
toto,
tutu,
tata

# Estilo de nomenclatura correspondente aos nomes corretos de atributos de classe.
class-attribute-naming-style=any

# Expressão regular correspondente aos nomes corretos de atributos de classe. Substitui class-
# attribute-naming-style.
#class-attribute-rgx=

# Estilo de nomenclatura correspondente aos nomes corretos de classe.
class-naming-style=PascalCase

# Expressão regular correspondente aos nomes corretos de classe. Substitui class-naming-
# style.
#class-rgx=

# Estilo de nomenclatura correspondente aos nomes corretos de constantes.
const-naming-style=UPPER_CASE

# Expressão regular correspondente aos nomes corretos de constantes. Substitui const-naming-
# style.
#const-rgx=

# Comprimento mínimo de linha para funções/classes que exigem docstrings, as mais curtas
# são isentas.
docstring-min-length=-1

# Estilo de nomenclatura que corresponde aos nomes corretos das funções.
function-naming-style=snake_case

# Expressão regular que corresponde aos nomes corretos das funções. Substitui function-
# naming-style.
#function-rgx=

# Bons nomes de variáveis ​​que devem ser sempre aceitos, separados por uma vírgula.
good-names=i,
j,
k,
ex,
Run,
_

# Incluir uma dica para o formato de nomenclatura correto com invalid-name.
include-naming-hint=no

# Estilo de nomenclatura correspondente aos nomes corretos de iteração em linha.
inlinevar-naming-style=any

# Expressão regular correspondente aos nomes corretos de iteração em linha. Substitui
# inlinevar-naming-style.
#inlinevar-rgx=

# Estilo de nomenclatura correspondente aos nomes corretos de método.
method-naming-style=snake_case

# Expressão regular correspondente aos nomes corretos de método. Substitui method-naming-
# style.
#method-rgx=

# Estilo de nomenclatura correspondente aos nomes corretos de módulo.
module-naming-style=snake_case

# Expressão regular correspondente aos nomes corretos de módulo. Substitui module-naming-
# style.
#module-rgx=

# Conjuntos de nomes delimitados por dois pontos que determinam o estilo de nomenclatura um do outro quando
# as expressões regulares de nome permitem vários estilos.
name-group=

# Expressão regular que deve corresponder apenas a nomes de funções ou classes que
# não exijam uma docstring.
no-docstring-rgx=^_

# Lista de decoradores que produzem propriedades, como abc.abstractproperty. Adicione
# a esta lista para registrar outros decoradores que produzem propriedades válidas.
# Esses decoradores são levados em consideração apenas para invalid-name.
property-classes=abc.abstractproperty

# Estilo de nomenclatura que corresponde a nomes de variáveis ​​corretos.
variable-naming-style=snake_case

# Expressão regular que corresponde a nomes de variáveis ​​corretos. Substitui variable-
# naming-style.
#variable-rgx=

[VARIABLES]

# Lista de nomes adicionais que devem ser definidos em builtins. Lembre-se de que
# você deve evitar definir novos builtins quando possível.
additional-builtins=

# Informa se variáveis ​​globais não utilizadas devem ser tratadas como uma violação.
allow-global-unused-variables=yes

# Lista de strings que podem identificar uma função de retorno de chamada pelo nome. Um retorno de chamada
# nome deve começar ou terminar com uma dessas strings.
callbacks=cb_,
_cb

# Uma expressão regular que corresponde ao nome de variáveis ​​fictícias (ou seja, não deve
# ser usada).
dummy-variables-rgx=_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_

# Nomes de argumentos que correspondem a esta expressão serão ignorados. O padrão é name
# com sublinhado inicial.
ignored-argument-names=_.*|^ignored_|^unused_

# Informa se devemos verificar se há importação não utilizada em arquivos __init__.
init-import=no

# Lista de nomes de módulos qualificados que podem ter objetos que podem redefinir
# builtins.
redefining-builtins-modules=six.moves,past.builtins,future.builtins,builtins,io

[TYPECHECK]

# Lista de decoradores que produzem gerenciadores de contexto, como
# contextlib.contextmanager. Adicione a esta lista para registrar outros decoradores que
# produzem gerenciadores de contexto válidos.
contextmanager-decorators=contextlib.contextmanager

# Lista de membros que são definidos dinamicamente e perdidos pelo sistema de inferência
# pylint e, portanto, não devem disparar E1101 quando acessados. Expressões regulares
# do Python são aceitas.
generated-members=

# Informa se os membros ausentes acessados ​​na classe mixin devem ser ignorados. Uma
# classe mixin é detectada se seu nome termina com "mixin" (sem distinção entre maiúsculas e minúsculas).
ignore-mixin-members=yes

# Informa se deve avisar sobre membros ausentes quando o proprietário do atributo
# é inferido como Nenhum.
ignore-none=yes

# Este sinalizador controla se o pylint deve avisar sobre no-member e similares
# verifica sempre que um objeto opaco é retornado ao inferir. A inferência
# pode retornar vários resultados potenciais ao avaliar um objeto Python, mas
# alguns ramos podem não ser avaliados, o que resulta em inferência parcial.
# Nesse caso, pode ser útil ainda emitir no-member e outras verificações para
# o restante dos objetos inferidos.
ignore-on-opaque-inference=yes

# Lista de nomes de classes para os quais os atributos de membros não devem ser verificados (útil
# para classes com atributos definidos dinamicamente). Isso suporta o uso de
# nomes qualificados.
ignore-classes=optparse.Values,thread._local,_thread._local

# Lista de nomes de módulos para os quais os atributos de membros não devem ser verificados
# (útil para módulos/projetos onde os namespaces são manipulados durante o tempo de execução
# e, portanto, os atributos de membros existentes não podem ser deduzidos por análise estática). Ele
# suporta nomes de módulos qualificados, bem como correspondência de padrões Unix.
ignored-modules=

# Mostra uma dica com nomes possíveis quando um nome de membro não foi encontrado. O aspecto
# de encontrar a dica é baseado na distância de edição.
missing-member-hint=yes

# A distância mínima de edição que um nome deve ter para ser considerado uma
# correspondência semelhante para um nome de membro ausente.
missing-member-hint-distance=1

# O número total de nomes semelhantes que devem ser levados em consideração ao
# mostrar uma dica para um membro ausente.
missing-member-max-choices=1

# Lista de decoradores que alteram a assinatura de uma função decorada.
signature-mutators=

[IMPORTS]

# Lista de módulos que podem ser importados em qualquer nível, não apenas no nível
# superior.
allow-any-import-level=

# Permite importações curinga de módulos que definem __all__.
allow-wildcard-with-all=no

# Analisar blocos de fallback de importação. Isso pode ser usado para dar suporte a códigos compatíveis com Python 2 e
# 3, o que significa que o bloco pode ter código que existe
# somente em um ou outro interpretador, levando a falsos positivos quando analisado.
analyse-fallback-blocks=no

# Módulos obsoletos que não devem ser usados, separados por uma vírgula.
deprecated-modules=optparse,tkinter.tix

# Crie um gráfico de dependências externas no arquivo fornecido (o relatório RP0402 não deve
# ser desabilitado).
ext-import-graph=

# Crie um gráfico de todas as dependências (ou seja, internas e externas) no
# arquivo fornecido (o relatório RP0402 não deve
# ser desabilitado).
import-graph=

# Crie um gráfico de dependências internas no arquivo fornecido (o relatório RP0402 não deve
# ser desabilitado).
int-import-graph=

# Force a ordem de importação para reconhecer um módulo como parte das bibliotecas de compatibilidade
# padrão.
known-standard-library=

# Forçar ordem de importação para reconhecer um módulo como parte de uma biblioteca de terceiros.
known-third-party=enchant

# Casais de módulos e módulos preferenciais, separados por uma vírgula.
preferred-modules=

[CLASSES]

# Lista de nomes de métodos usados ​​para declarar (ou seja, atribuir) atributos de instância.
defining-attr-methods=__init__,
__new__,
setUp,
__post_init__

# Lista de nomes de membros, que devem ser excluídos do acesso protegido
# aviso.
exclude-protected=_asdict,
_fields,
_replace,
_source,
_make

# Lista de nomes válidos para o primeiro argumento em um método de classe.
valid-classmethod-first-arg=cls

# Lista de nomes válidos para o primeiro argumento em um método de classe de metaclasse.
valid-metaclass-classmethod-first-arg=cls

[DESIGN]

# Número máximo de argumentos para função/método.
max-args=5

# Número máximo de atributos para uma classe (consulte R0902).
max-attributes=7

# Número máximo de expressões booleanas em uma instrução if (consulte R0916).
max-bool-expr=5

# Número máximo de ramificações para o corpo da função/método.
max-branches=12

# Número máximo de locais para o corpo da função/método.
max-locals=15

# Número máximo de pais para uma classe (consulte R0901).
max-parents=7

# Número máximo de métodos públicos para uma classe (consulte R0904).
max-public-methods=20

# Número máximo de retornos/rendimentos para o corpo da função/método.
max-returns=6

# Número máximo de instruções no corpo da função/método.
max-statements=50

# Número mínimo de métodos públicos para uma classe (veja R0903).
min-public-methods=2

[EXCEÇÕES]

# Exceções